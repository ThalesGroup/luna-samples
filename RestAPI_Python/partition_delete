#!/usr/bin/env python3
import sys
import base64
import requests
import getpass
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

if len(sys.argv) != 3:
	print ("Usage :-")
	print ("./partition_delete <HSM_IP_OR_HOST> <appliance_username>")
	quit()
else:
	hostname = sys.argv[1]
	username = sys.argv[2]
	password = getpass.getpass(prompt="["+username+"] Password : ")
	auth = username + ":" + password

authString = base64.b64encode(bytes(auth, 'utf-8')).decode("ascii")
header = {'Content-type': 'application/vnd.safenetinc.lunasa+json;version=', 'Authorization': 'Basic %s' % authString}




# Open a private session.
print ("Connecting to Luna HSM : [",hostname,"]\n")
url = "https://"+hostname+":8443/auth/session"
try:
	response = requests.post(url, headers=header, verify=False)
	session_cookie = response.cookies
except OSError as osErr:
	print("\tFailed to connect to :"+hostname)
	print("\tReason: ", osErr)
	quit()

if response.status_code!=204:
        print ("Failed to open a session with : ", hostname)
        quit()




# Get HSM serial number.
url = "https://" + hostname + ":8443/api/lunasa/hsms"
response = requests.get(url, headers=header, verify=False, cookies=session_cookie)
hsmSerial = (response.json())["hsms"][0]['id']




# Check for failed login attempts before SO login.
url = "https://" + hostname + ":8443/api/lunasa/hsms/" + hsmSerial
response = requests.get(url, headers=header, verify=False, cookies=session_cookie)
soLoginsLeft = response.json()['soLoginsLeft']
if (soLoginsLeft==1):
	print ("*** WARNING ***")
	print ("- You have only one SO login attempt remaining.")
	print ("- Three failed SO login attempts will zeroize the Luna HSM.")
	print ("- This script will not proceed further.")
	quit()



# Login as security officer
url = "https://" + hostname + ":8443/api/lunasa/hsms/" + hsmSerial + "/login"
print ("\nPlease enter the security officer password to proceed.")
print ("Caution: Three failed so login attempts will zeroize the Luna HSM.")
print ("SO Login Attempts left : ", soLoginsLeft, "\n")
so_password = getpass.getpass(prompt="SECURITY OFFICER PASSWORD : ")
post_data = '{"ped": "0", "password": "' + so_password + '", "role": "so"}'
response = requests.post(url, headers=header, verify=False, data=post_data, cookies=session_cookie)
if response.status_code!=204:
	print ("Unable to login as SO. Response code: ", response.status_code)
	quit();
else:
	print ("SO Login successful.\n\n")




# Delete a partition
while True:
	print ("Please enter the serial number of the partition you want to delete.")
	partitionSerial = input("Serial Number : ")
	url = "https://" + hostname + ":8443/api/lunasa/hsms/" + hsmSerial + "/partitions/" + partitionSerial
	print ("\n\nAre you certain that the serial number you entered is correct?")
	confirmation = input("Type 'delete-it' to confirm deletion : ")
	if (confirmation=='delete-it'):
		url = "https://" + hostname + ":8443/api/lunasa/hsms/" + hsmSerial + "/partitions/" + partitionSerial
		response = requests.delete(url, headers=header, verify=False, cookies=session_cookie)
		if (response.status_code!=204):
			print ("Failed to create partition. Response code : " , response.status_code)
		else:
			print ("Partition deleted successfully.\n")
			choice = input("Would you like to delete any other partitions? Please type 'Yes' or 'No' : ")
			if (choice!='Yes'):
				print ("Exiting...")
				break
			else:
				print()
	else:
		print ("Exiting...")




# Security officer logout
url = "https://" + hostname + ":8443/api/lunasa/hsms/" + hsmSerial + "/logout"
response = requests.post(url, headers=header, verify=False, cookies=session_cookie)




# Delete private session
url = "https://" + hostname + ":8443/auth/session"
response = requests.delete(url, headers=header, verify=False, cookies=session_cookie)
