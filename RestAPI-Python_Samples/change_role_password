#!/usr/bin/env python3
#*********************************************************************************
#                                                                                *
# This file is part of the "luna-samples" project.                               *
#                                                                                *
# The "luna-samples" project is provided under the MIT license (see the          *
# following Web site for further details: https://mit-license.org/ ).            *
#                                                                                *
# Copyright Â© 2025 Thales Group                                                  *
#                                                                                *
#*********************************************************************************

# OBJECTIVE:
# - This python code demonstrates how to change password for SO, PSO, CO, and CU roles.
# - The code has been tested and works on a Password based Network HSM.
# - Some modifications are required if you're using a PED based Network HSM.
# - Please exercise caution when executing this code. An incorrect password may result in partition lockout or zeroisation.

import sys
import base64
import requests
import getpass
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

if len(sys.argv) != 3:
	print ("Usage :-")
	print ("./change_role_password <HSM_IP_OR_HOST> <appliance username>")
	quit()
else:
	hostname = sys.argv[1]
	username = sys.argv[2]
	password = getpass.getpass(prompt="["+ username + "] Password : ")
	auth = username + ":" + password

authString = base64.b64encode(bytes(auth, 'utf-8')).decode("ascii")
header = {'Content-type': 'application/vnd.safenetinc.lunasa+json;version=', 'Authorization': 'Basic %s' % authString}



# Disconnects from HSM.
def disconnect_from_hsm():
	url = "https://" + hostname + ":8443/auth/session"
	response = requests.delete(url, headers=header, verify=False, cookies=session_cookie)


# Connects to HSM.
def connect_to_hsm():
	global session_cookie
	print ("\nConnecting to Luna HSM : [",hostname,"]\n")
	url = "https://"+hostname+":8443/auth/session"
	try:
        	response = requests.post(url, headers=header, verify=False)
	        session_cookie = response.cookies
	except OSError as osErr:
        	print("\tFailed to connect to :"+hostname)
	        print("\tReason: ", osErr)
        	quit()

	if response.status_code!=204:
        	print ("Failed to open a session with : ", hostname)
	        quit()


# Get HSM serial number.
def get_hsm_serial():
	global hsm_serial
	url = "https://" + hostname + ":8443/api/lunasa/hsms"
	response = requests.get(url, headers=header, verify=False, cookies=session_cookie)
	hsm_serial = (response.json())["hsms"][0]['id']


# Get partition list
def list_partitions():
	url = "https://" + hostname + ":8443/api/lunasa/hsms/" + hsm_serial + "/partitions"
	response = requests.get(url, headers=header, verify=False, cookies=session_cookie)
	partitions = response.json()['partitions']
	print ("\nSERIAL\t\tNAME")
	for partition in partitions:
        	print (partition['id'], "\t", end='')
	        url = "https://" + hostname + ":8443" + partition['url']
        	response = requests.get(url, headers=header, verify=False, cookies=session_cookie)
	        partitionInfo = response.json()
        	print (partitionInfo['name'],"\n", end='')
	print("\n")


# Prompts for old and new password.
def input_password():
	global old_password, new_password
	old_password = getpass.getpass("  Current " + role + " Password : ")
	new_password = getpass.getpass("  New " + role + " Password : ")
	confirm_password = getpass.getpass("  Confirm " + role + " Password : ")
	if(new_password!=confirm_password):
		print("ERROR : Passwords do not match.")
		disconnect_from_hsm()
		quit()



# main
connect_to_hsm()
get_hsm_serial()

print ("\nChange password for - ")
print ("- Security Officer (so)")
print ("- Partition Security Officer (pso)")
print ("- Crypto Officer (co)")
print ("- Crypto User (cu)")
role = input("Role : ")

if(role.lower()=="so"):
	input_password()
	url = "https://" + hostname + ":8443/api/lunasa/hsms/" + hsm_serial + "/roles/so"
	patch_data = '{"oldPassword": "' + old_password + '", "newPassword": "' + new_password + '"}'
	response = requests.patch(url, headers=header, verify=False, data=patch_data, cookies=session_cookie)
	if(response.status_code==202):
		print("Password changed successfully.")
	else:
		print("ERROR : Password change failed. Status code :", response.status_code)

elif (role.lower()=="co"):
	list_partitions()
	partition_serial = input("Enter Partition Serial Number : ")
	input_password()

	url = "https://" + hostname + ":8443/api/lunasa/hsms/" + hsm_serial + "/partitions/" + partition_serial + "/roles/co"
	patch_data = '{"oldPassword": "' + old_password + '", "newPassword": "' + new_password + '"}'
	response = requests.patch(url, headers=header, verify=False, data=patch_data, cookies=session_cookie)
	if(response.status_code==202):
		print("Password changed successfully.")
	else:
		print("ERROR : Password change failed. Status code :", response.status_code)

elif (role.lower()=="cu"):
	list_partitions()
	partition_serial = input("Enter Partition Serial Number : ")
	input_password()

	url = "https://" + hostname + ":8443/api/lunasa/hsms/" + hsm_serial + "/partitions/" + partition_serial + "/roles/cu"
	patch_data = '{"oldPassword": "' + old_password + '", "newPassword": "' + new_password + '"}'
	response = requests.patch(url, headers=header, verify=False, data=patch_data, cookies=session_cookie)
	if(response.status_code==202):
		print("Password changed successfully.")
	else:
		print("ERROR : Password change failed. Status code : ", response.status_code)

elif(role.lower()=="pso"):
	list_partitions()
	partition_serial = input("Enter Partition Serial Number : ")
	input_password()

	url = "https://" + hostname + ":8443/api/lunasa/hsms/" + hsm_serial + "/partitions/" + partition_serial + "/roles/so"
	patch_data = '{"oldPassword": "' + old_password + '", "newPassword": "' + new_password + '"}'
	response = requests.patch(url, headers=header, verify=False, data=patch_data, cookies=session_cookie)
	if(response.status_code==202):
		print("Password changed successfully.")
	else:
		print("ERROR : Password change failed. Status code : ", response.status_code)
else:
	print ("ERROR : accepted roles are so, pso, co and cu");


print("\n")
disconnect_from_hsm()
