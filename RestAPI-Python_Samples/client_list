#!/usr/bin/env python3

#*********************************************************************************
#                                                                                *
# This file is part of the "luna-samples" project.                               *
#                                                                                *
# The "luna-samples" project is provided under the MIT license (see the          *
# following Web site for further details: https://mit-license.org/ ).            *
#                                                                                *
# Copyright Â© 2025 Thales Group                                                  *
#                                                                                *
#*********************************************************************************


# OBJECTIVE :
# - This code demonstrates how to retrieve a list of all registered clients from a Luna Network HSM.


import sys
import os
import requests
import base64
import urllib3
import getpass
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)




if len(sys.argv) != 3:
	print ("\nusage :-")
	print ("./client_list <HSM_IP_OR_HOST> <appliance_username>\n")
	quit()
else:
	hostname = sys.argv[1]
	username = sys.argv[2]
	password = getpass.getpass(prompt="["+username+"] Password : ")
	auth = username + ":" + password

auth_string = base64.b64encode(bytes(auth, 'utf-8')).decode("ascii")
url = "https://"+hostname+":8443/api/lunasa/ntls/clients"
header = {'Content-type': 'application/vnd.safenetinc.lunasa+json;version=', 'Authorization': 'Basic %s' % auth_string}
response = "No Response received."




print ("Connecting to Luna HSM : [",hostname,"]\n")
try:
	response = requests.get(url, headers=header, verify=False)
except OSError as osErr:
	print("\tFailed to connect to :"+hostname)
	print("\tReason: ", osErr)
	quit()
if response.status_code==401:
	print("Login failed.")
	quit()




if response.status_code!=200:
	print ("Command failed, Response code: ", response.status_code)
	quit()
else:
	data = response.json()
	all_clients = data['clients']

	max_len = 0
	for client in all_clients:
		if(len(client['clientID'])>max_len):
			max_len=len(client['clientID'])
	max_len = str(max_len)

	table_header = "{:<" + max_len + "} {:<" + max_len + "} {:<20} {}"
	print(table_header.format("CLIENT ID", "HOSTNAME", "IP ADDRESS", "PARTITIONS ASSIGNED"))
	for client in all_clients:
		url = "https://"+hostname+":8443/api/lunasa/ntls/clients/"+ client['clientID']
		response = requests.get(url, headers=header, verify=False)
		client_info = response.json()
		client_id = client_info['clientID']
		client_hostname = client_info['hostname']
		client_ip = client_info['ip']
		par_assigned = "YES"

		if len(client_info['hostname'])==0:
			client_hostname = "--NONE--"

		if len(client_info['ip'])==0:
			client_ip = "--NONE--"

		url = "https://" + hostname + ":8443" + client_info['links']
		response = requests.get(url, headers=header, verify=False)
		link_info = response.json()
		link = link_info['links']
		display_client = "{:<" + max_len + "} {:<" + max_len + "} {:<20} {}"
		if len(link) == 0:
			par_assigned = "NONE"
			print (display_client.format(client_id, client_hostname, client_ip, par_assigned))
		else:
			num = len(link)
			par_assigned = "{} assigned."
			print (display_client.format(client_id, client_hostname, client_ip, par_assigned.format(num)))
print()
